apiVersion: v1
kind: BuildConfig
metadata:
  name: pipeline
spec:
  strategy:
    jenkinsPipelineStrategy:
      env:
        - name: PROJECTNAME
          description: Name of the project in OpenShift
          value: JPROJECTNAME
        - name: DOMAINNAME
          description: The domain name of the OpenShift server
          value: JDOMAINNAME
        - name: GITREPOENV
          description: Git repository URL for the OpenShift templates
          value: JGITREPOENV
        - name: GITREPOFE
          description: Git repository URL for your Frontend Application layer
          value: JGITREPOFE
        - name: GITREPOAPI
          description: Git repository URL for your API Application layer
          value: JGITREPOAPI
        - name: GITREPODB
          description: Git repository URL for your Database and Message Queue layer
          value: JGITREPODB
        - name: GITREPOTEST
          description: Git repository URL for your end to end tests
          value: "JGITREPOTEST"
        - name: APIVERSION
          description: The version number for your API layer container and code
          value: JAPIVERSION
        - name: DBVERSION
          description: The version number for you Database layer container
          value: JDBVERSION
        - name: MQVERSION
          description: The version number for you Message Queue layer container
          value: JMQVERSION
        - name: FRONTENDVERSION
          description: The version number for you Frontend layer container
          value: JFRONTENDVERSION
        - name: BRANCHENV
          description: The branch name to use for the environment
          value: JBRANCHENV
        - name: BRANCHFE
          description: The branch name to use for the Frontend layer container and code
          value: JBRANCHFE
        - name: BRANCHAPI
          description: The branch name to use for the API layer container and code
          value: JBRANCHAPI
        - name: BRANCHDB
          description: The branch name to use for the Database and Message Queue layer container
          value: JBRANCHDB
        - name: BRANCHTEST
          description: The branch name to use for the end to end testing
          value: JBRANCHTEST
        - name: ANGULARCLIVERSION
          description: Angular version to compile frontend
          value: JANGULARCLIVERSION
        - name: DOCKERREG
          description: The hostname and port number for your private docker registry
          value: JDOCKERREG
        - name: BUILDDB
          description: Whether you want to include the Database and Message Queue as part of the build (true for the first build)
          value: "JBUILDDB"
        - name: FECHKURL
          description: URL to check to ensure frontend is ready and running
          value: JFECHKURL
        - name: FEPORT
          description: Port number container is listening on
          value: "JFEPORT"
        - name: JAPICHKURL
          description: URL to check to ensure application is ready and running
          value: JAPICHKURL
        - name: APIPORT
          description: Port number container is listening on
          value: "JAPIPORT"
        - name: AMQMOUNT0
          description: Persistent data storage directory within the container for Message Queue
          value: JAMQMOUNT0
        - name: AMQMOUNT1
          description: Persistent log storage directory within the container for Message Queue
          value: JAMQMOUNT1
        - name: DBMOUNT
          description: Persistent data storage directory within the database container
          value: JDBMOUNT
        - name: MYSQLROOTPW
          description: Root password for MySQL
          value: JMYSQLROOTPW
        - name: MAVENOPTIONS
          description: Options to supply to mvn to build your project and test
          value: JMAVENOPTIONS
      jenkinsfile: |-
        pipeline {
          agent none
          stages {
            stage ("Create OpenShift Environment") {
              agent {label 'maven'}
              when {
                environment name: 'BUILDDB', value: 'true'
              }
              stages {
                stage("Clone Source") {
                  steps {
                    checkout([$class: 'GitSCM',
                                branches: [[name: "*/${BRANCHENV}"]],
                                extensions: [
                                  [$class: 'RelativeTargetDirectory', relativeTargetDir: 'environment']
                                ],
                                userRemoteConfigs: [[url: "${GITREPOENV}"]]
                            ])
                  }
                }
                stage("Create or Update Frontend Deployment Config") {
                  steps {
                  dir('environment') {
                      sh 'eval echo \\""\$(cat openshift-config/Frontend/deploymentConfig.yaml)\"\\" | oc apply -f -'
                    }
                  }
                }
                stage("Create or updated Frontend Service") {
                  steps {
                    dir('environment') {
                      sh 'eval echo \\""\$(cat openshift-config/Frontend/service.yaml)\"\\" | oc apply -f -'
                    }
                  }
                }
                stage("Create Frontend Public route") {
                  steps {
                    dir('environment') {
                      sh 'eval echo \\""\$(cat openshift-config/Frontend/route.yaml)\"\\" | oc apply -f -'
                      sh 'echo "Internet route is `oc get route | awk \'{print $2}\' | grep ${PROJECTNAME}`"'
                    }
                  }
                }

                stage("Create or Update API Deployment Config") {
                  steps {
                  dir('environment') {
                      sh 'eval echo \\""\$(cat openshift-config/API/deploymentConfig.yaml)\"\\" | oc apply -f -'
                    }
                  }
                }
                stage("Create or updated API Service") {
                  steps {
                    dir('environment') {
                      sh 'eval echo \\""\$(cat openshift-config/API/service.yaml)\"\\" | oc apply -f -'
                    }
                  }
                }
                stage("Create API Public route") {
                  steps {
                    dir('environment') {
                      sh 'eval echo \\""\$(cat openshift-config/API/route.yaml)\"\\" | oc apply -f -'
                      sh 'echo "Internet route is `oc get route | awk \'{print $2}\' | grep ${PROJECTNAME}`"'
                    }
                  }
                }

                stage("Create persistent storage for DB and MQ") {
                  steps {
                    dir('environment') {
                      sh 'eval echo \\""\$(cat openshift-config/ActiveMQ/persistentVolume-claim0.yaml)\"\\" | oc apply -f -'
                      sh 'eval echo \\""\$(cat openshift-config/ActiveMQ/persistentVolume-claim1.yaml)\"\\" | oc apply -f -'
                      sh 'eval echo \\""\$(cat openshift-config/MySQL/persistentVolume-claim0.yaml)\"\\" | oc apply -f -'
                    }
                  }
                }
                stage("Create DB and MQ Deployment Config") {
                  steps {
                    dir('environment') {
                      sh 'eval echo \\""\$(cat openshift-config/ActiveMQ/deploymentConfig.yaml)\"\\" | oc apply -f -'
                      sh 'eval echo \\""\$(cat openshift-config/MySQL/deploymentConfig.yaml)\"\\" | oc apply -f -'
                    }
                  }
                }
                stage("Create Services for DB and AMQ") {
                  steps {
                    dir('environment') {
                      sh 'eval echo \\""\$(cat openshift-config/MySQL/service.yaml)\"\\" | oc apply -f -'
                      sh 'eval echo \\""\$(cat openshift-config/ActiveMQ/service.yaml)\"\\" | oc apply -f -'
                    }
                  }
                }
              }
            }
            stage ("Build Front End") {
              agent {label 'nodejs'}
              stages {
                stage("Clone Source") {
                  steps {
                    checkout([$class: 'GitSCM',
                                branches: [[name: "*/${BRANCHFE}"]],
                                extensions: [
                                  [$class: 'RelativeTargetDirectory', relativeTargetDir: 'frontend']
                                ],
                                userRemoteConfigs: [[url: "${GITREPOFE}"]]
                            ])
                  }
                }
                stage("Install Angular") {
                  steps {
                    dir('frontend') {
                      sh "npm install -g @angular/cli@${ANGULARCLIVERSION}"
                    }
                  }
                }
                stage("Angular build") {
                  steps {
                    dir('frontend') {
                      sh 'npm install'
                      sh 'ng build --prod=true'
                    }
                  }
                }
                stage("Create Build For Frontend Server") {
                  steps {
                    dir('frontend') {
                      sh 'oc new-build --strategy docker --binary --name frontend --to=${DOCKERREG} --to-docker || echo "Build already exists"'
                      sh "oc patch bc frontend -p '{\"spec\":{\"output\": {\"to\": {\"kind\": \"DockerImage\", \"name\": \"${DOCKERREG}/${PROJECTNAME}/frontend:${APIVERSION}\"}} }}'"
                    }
                  }
                }
                stage("Build Frontend Image") {
                  steps {
                    dir('frontend') {
                      sh 'oc start-build frontend --from-dir . --follow --wait=true || (echo "BUILD FAILED" && exit 1)'
                    }
                  }
                }
              }
            }
            stage("Build API") {
              agent {label 'maven'}
              stages {
                stage("Clone Source") {
                  steps {
                    checkout([$class: 'GitSCM',
                                branches: [[name: "*/${BRANCHAPI}"]],
                                extensions: [
                                  [$class: 'RelativeTargetDirectory', relativeTargetDir: 'api']
                                ],
                                userRemoteConfigs: [[url: "${GITREPOAPI}"]]
                            ])
                  }
                }
                stage("Build JAR") {
                  steps {
                    dir('api') {
                      sh 'mvn ${MAVENOPTIONS}'
                    }
                  }
                }
                stage("Create Build For Java Spring Boot Server") {
                  steps {
                    dir('api') {
                      sh 'oc new-build --strategy docker --binary --name api --to=${DOCKERREG} --to-docker || echo "Build already exists"'
                      sh "oc patch bc api -p '{\"spec\":{\"output\": {\"to\": {\"kind\": \"DockerImage\", \"name\": \"${DOCKERREG}/${PROJECTNAME}/api:${APIVERSION}\"}} }}'"
                    }
                  }
                }
                stage("Build API Server Image") {
                  steps {
                    dir('api') {
                      sh 'oc start-build api --from-dir . --follow --wait=true || (echo "BUILD FAILED" && exit 1)'
                    }
                  }
                }
              }
            }
            stage("Build Database and Message Queue Servers") {
              agent {label 'maven'}
              when {
                environment name: 'BUILDDB', value: 'true'
              }
              stages {
                stage("Clone Source") {
                  steps {
                    checkout([$class: 'GitSCM',
                                branches: [[name: "*/${BRANCHDB}"]],
                                extensions: [
                                  [$class: 'RelativeTargetDirectory', relativeTargetDir: 'dbmq']
                                ],
                                userRemoteConfigs: [[url: "${GITREPODB}"]]
                            ])
                  }
                }
                stage("Create Build For Database Server") {
                  steps {
                    dir('dbmq/db') {
                      sh 'oc new-build --strategy docker --binary --name mysql --to=${DOCKERREG} --to-docker || echo "Build already exists"'
                      sh "oc patch bc mysql -p '{\"spec\":{\"output\": {\"to\": {\"kind\": \"DockerImage\", \"name\": \"${DOCKERREG}/${PROJECTNAME}/mysql:${APIVERSION}\"}} }}'"
                    }
                  }
                }
                stage("Build Database Image") {
                  steps {
                    dir('dbmq/db') {
                      sh 'oc start-build mysql --from-dir . --follow --wait=true'
                    }
                  }
                }
                stage("Create Build For Message Queue Server") {
                  steps {
                    dir('dbmq/mq') {
                      sh 'oc new-build --strategy docker --binary --name activemq --to=${DOCKERREG} --to-docker || echo "Build already exists"'
                      sh "oc patch bc activemq -p '{\"spec\":{\"output\": {\"to\": {\"kind\": \"DockerImage\", \"name\": \"${DOCKERREG}/${PROJECTNAME}/activemq:${APIVERSION}\"}} }}'"
                    }
                  }
                }
                stage("Build Message Queue Server Image") {
                  steps {
                    dir('dbmq/mq') {
                      sh 'oc start-build activemq --from-dir . --follow --wait=true'
                    }
                  }
                }
              }
            }
            stage("Test Application") {
              agent {label 'maven'}
              when {
                not { environment name: 'GITREPOTEST', value: 'false' }
              }
              stages {
                stage("Clone Source") {
                  steps {
                    checkout([$class: 'GitSCM',
                                branches: [[name: "*/${BRANCHTEST}"]],
                                extensions: [
                                  [$class: 'RelativeTargetDirectory', relativeTargetDir: 'tests']
                                ],
                                userRemoteConfigs: [[url: "${GITREPOTEST}"]]
                            ])
                  }
                }
                stage("Test environment") {
                  steps {
                    dir('tests') {
                      sh 'echo "You should perform tests to make sure your application works"'
                      sh 'echo "Something like a curl to a status port -  curl http://trades.dev2.conygre.com/trades/status"'
                      sh 'echo "Or http://trades.dev2.conygre.com/trades/list"'
                    }
                  }
                }
              }
            }
          }
        }
    type: JenkinsPipeline
    triggers: {
      pollSCM('H */2 * * 1-5')
    }
