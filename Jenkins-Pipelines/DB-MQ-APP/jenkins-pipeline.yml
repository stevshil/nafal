apiVersion: v1
kind: BuildConfig
metadata:
  name: pipeline
spec:
  strategy:
    jenkinsPipelineStrategy:
      jenkinsfile: |-
        pipeline {
          agent { label "maven" }
          stages {
            stage("Clone Source") {
              steps {
                checkout([$class: 'GitSCM',
                            branches: [[name: '*/${BRANCH}']],
                            extensions: [
                              [$class: 'RelativeTargetDirectory', relativeTargetDir: '${WORKDIR}']
                            ],
                            userRemoteConfigs: [[url: '${GITREPO}']]
                        ])
              }
            }
            stage("Build JAR") {
              steps {
                dir('${WORKDIR}') {
                  sh 'mvn -Dmaven.test.skip=true clean package'
                }
              }
            }
            stage("Create Build For Java Spring Boot Server") {
              steps {
                dir('${WORKDIR}') {
                  sh 'oc new-build --strategy docker --binary --name javaapp || echo "Build already exists"'
                }
              }
            }
            stage("Build Trade Server Image") {
              steps {
                dir('${WORKDIR}') {
                  sh 'cp Dockerfile-trade-server Dockerfile'
                  sh '(oc start-build javaapp --from-dir . --follow --wait=true && rm Dockerfile) || rm Dockerfile'
                  sh 'oc tag ${PROJECTNAME}/javaapp:latest ${PROJECTNAME}/javaapp:1.0.0' # Tag latest to version number to allow deployment
                }
              }
            }
            stage("Create Build For Database Server") {
              steps {
                dir('${WORKDIR}') {
                  sh 'oc new-build --strategy docker --binary --name database || echo "Build already exists"'
                }
              }
            }
            stage("Build Database Image") {
              steps {
                dir('${WORKDIR}') {
                  sh 'cp Dockerfile-mysql Dockerfile'
                  sh '(oc start-build database --from-dir . --follow --wait=true && rm Dockerfile) || rm Dockerfile'
                  sh 'oc tag ${PROJECTNAME}/database:latest ${PROJECTNAME}/database:1.0.0'
                }
              }
            }
            stage("Create Build For Message Queue Server") {
              steps {
                dir('${WORKDIR}') {
                  sh 'oc new-build --strategy docker --binary --name mq || echo "Build already exists"'
                }
              }
            }
            stage("Build Message Queue Server Image") {
              steps {
                dir('${WORKDIR}') {
                  sh 'cp Dockerfile-activemq Dockerfile'
                  sh '(oc start-build mq --from-dir . --follow --wait=true && rm Dockerfile) || rm Dockerfile'
                  sh 'oc tag ${PROJECTNAME}/mq:latest ${PROJECTNAME}/mq:1.0.0'
                }
              }
            }
            stage("Create persistent storage") {
              steps {
                dir('${WORKDIR}') {
                  sh '(oc get PersistentVolumeClaim | grep mq-claim) || oc apply -f openshift/mq-persistentvolumeclaim.yaml'
                  sh '(oc get PersistentVolumeClaim | grep database-claim) || oc apply -f openshift/database-persistentvolumeclaim.yaml'
                }
              }
            }
            stage("Create Deployment Config") {
              steps {
                dir('${WORKDIR}') {
                  sh '(oc get deploymentconfig | grep database) || oc apply -f openshift/database-deploymentconfig.yaml'
                  sh '(oc get deploymentconfig | grep mq) || oc apply -f openshift/mq-deploymentconfig.yaml'
                  sh '(oc get deploymentconfig | grep javaapp) || oc apply -f openshift/javaapp-deploymentconfig.yaml'
                }
              }
            }
            stage("Create Services and rollout deployment") {
              steps {
                dir('${WORKDIR}') {
                  sh '(oc get svc | grep database) || oc apply -f openshift/database-service.yaml'
                  sh '(oc get svc | grep mq) || oc apply -f openshift/mq-service.yaml'
                  sh '(oc get svc | grep javaapp) || oc apply -f openshift/javaapp-service.yaml'
                }
              }
            }
            stage("Create Public route") {
              steps {
                dir('${WORKDIR}') {
                  sh '((oc get route | grep javaapp) && echo "javaapp already exposed") || oc apply -f openshift/route.yaml'
                  sh 'echo "Internet route is `oc get route | awk \'{print $2}\' | grep javaapp`"'
                }
              }
            }
            stage("Test environment") {
              steps {
                dir('${WORKDIR}') {
                  sh 'echo "You should perform tests to make sure your application works"'
                  sh 'echo "Something like a curl to a status port -  curl http://trades.dev2.conygre.com/trades/status"'
                  sh 'echo "Or http://trades.dev2.conygre.com/trades/list"'
                }
              }
            }
            stage("Clean up deployment") {
              steps {
                dir('${WORKDIR}') {
                        sh 'oc delete pods $(oc get pods | awk '$3 ~ /Completed|Error/ {print $0}' | awk '$2 ~ /0\/1/ {print $1}')'
                }
              }
            }
            stage("Push Docker images to private Docker registry") {
              steps {
                dir('${WORKDIR}') {
                        sh 'echo "PS group will need to push the images"'
                }
              }
            }
          }
        }
    type: JenkinsPipeline
    triggers: {
      pollSCM('H */2 * * 1-5')
    }
