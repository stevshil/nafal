#!/bin/bash

# Script to be used by PS for creating UAT and Production environments
# Makes use of the templates and similar style for the Jenkins
# Just deploys the framework, as the dockerreg will have the container versions
# uDeploy will then be used for container version deployments

echo "DOCKERREG: $DOCKERREG<br><br>"
# Log on to OpenShift server
oc login --insecure-skip-tls-verify=true -u ${ocuser} -p ${ocpasswd} https://${DOMAINNAME}:8443 >/dev/null 2>&1
if ! oc get project | grep ${PROJECTNAME} >/dev/null 2>&1
then
  oc new-project ${PROJECTNAME}
  echo "<br>"
fi

# Database
echo "Creating DB persistent storage<br>"
eval echo \""$(cat ../openshift-config/MySQL/persistentVolume-claim0.yaml)\"" | oc apply -f - 2>&1
if (( $? > 0 ))
then
  echo "<br>DB storage failed<br>"
  exit 5
fi
echo "Creating DB deployment configuration<br>"
eval echo \""$(cat ../openshift-config/MySQL/deploymentConfig.yaml)\"" | oc apply -f - 2>&1
if (( $? > 0 ))
then
  echo "<br>DB deployment config failed<br>"
  exit 1
fi
echo "Creating DB service configuration<br>"
 oc apply -f ../openshift-config/MySQL/service.yaml 2>&1
if (( $? > 0 ))
then
  echo "<br>DB service config failed<br>"
  exit 2
fi

# Message Queue/Broker
if [[ -n "$MQVERSION" ]]
then
  echo "Creating persistent storage for MQ<br>"
  eval echo \""$(cat ../openshift-config/ActiveMQ/persistentVolume-claim0.yaml)\"" | oc apply -f - 2>&1
  if (( $? > 0 ))
  then
    echo "<br>MQ storage failed<br>"
    exit 5
  fi
  eval echo \""$(cat ../openshift-config/ActiveMQ/persistentVolume-claim1.yaml)\"" | oc apply -f - 2>&1
  if (( $? > 0 ))
  then
    echo "<br>MQ storage failed<br>"
    exit 5
  fi
  echo "Creating MQ deployment configuration<br>"
  eval echo \""$(cat ../openshift-config/ActiveMQ/deploymentConfig.yaml)\"" | oc apply -f - 2>&1
  if (( $? > 0 ))
  then
    echo "<br>MQ deployment config failed<br>"
    exit 1
  fi
  echo "Creating MQ service configuration<br>"
  oc apply -f ../openshift-config/ActiveMQ/service.yaml 2>&1
  if (( $? > 0 ))
  then
    echo "<br>MQ service config failed<br>"
    exit 2
  fi
fi

# Front end
if [[ -n $FRONTENDVERSION ]]
then
  echo "Creating frontend deployment configuration<br>"
  eval echo \"$(cat ../openshift-config/Frontend/deploymentConfig.yaml)\" | oc apply -f - 2>&1
  if (( $? > 0 ))
  then
    echo "<br>FE deployment config failed<br>"
    exit 1
  fi
  echo "Creating frontend service configuration<br>"
  eval echo \"$(cat ../openshift-config/Frontend/service.yaml)\" | oc apply -f -  2>&1
  if (( $? > 0 ))
  then
    echo "<br>FE service config failed<br>"
    exit 2
  fi
  echo "Creating frontend route<br>"
  eval echo \"$(cat ../openshift-config/Frontend/route.yaml)\" | oc apply -f - 2>&1
  if (( $? > 0 ))
  then
    echo "<br>FE route config failed<br>"
    exit 3
  fi
  echo "<br>FE Internet route is `oc get route | awk '{print $2}' | grep ${PROJECTNAME}`<br>"
fi

# API
echo "Creating API deployment configuration<br>"
eval echo \""$(cat ../openshift-config/API/deploymentConfig.yaml)\"" | oc apply -f - 2>&1
if (( $? > 0 ))
then
  echo "<br>API deployment config failed<br>"
  exit 1
fi
echo "Creating API service configuration<br>"
eval echo \""$(cat ../openshift-config/API/service.yaml)\"" | oc apply -f - 2>&1
if (( $? > 0 ))
then
  echo "<br>API service config failed<br>"
  exit 2
fi
echo "Creating API route configuration<br>"
if [[ -n $FRONTENDVERSION ]]
  eval echo \""$(cat ../openshift-config/API/route.yaml)\"" | oc apply -f - 2>&1
else
  eval echo \""$(cat ../openshift-config/API/routefe.yaml)\"" | oc apply -f - 2>&1
fi
if (( $? > 0 ))
then
  echo "<br>API route config failed<br>"
  exit 3
fi
echo "<br>API Internet route is `oc get route | awk '{print $2}' | grep ${PROJECTNAME}`<br>"
