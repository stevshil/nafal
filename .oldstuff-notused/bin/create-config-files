#!/usr/bin/python

# Python script to build OpenShift configuration for application deployments
# Author: Steve Shilling
# Date: 14th August 2019

import sys
import os
import re
import pickle

questions={}

def __replaceLine(**props):
  # Private function that looks for all the possible variables in the templates and performs replacement

  theLine=props["line"]
  for key in props:
      searchre=re.compile(r"\${"+key+"}")
      result=re.subn(searchre,str(props[key]),theLine)
      if result[1] > 0:
          result=result[0]
          break
      else:
          result=theLine

  return result

def mkRoute(projectName,serviceName,dnsName,portNo):
  """
  Function to create the route files for all public routes required by the application.

  EXAMPLE
    mkRoute("steve1","testme","hello.conygre.com",8080)
  """

  inFh=open("general-templates/route.yaml","r")
  outFh=open("config/"+serviceName+"_"+str(portNo)+".route.yaml","w")

  props={}
  props["PROJECTNAME"]=projectName
  props["PUBLICURL"]=dnsName
  props["PORTNO"]=portNo

  for line in routefh:
    result=__replaceLine(line)
    outFh.write(result)

  inFh.close()
  outFh.close()

def mkService(containerName,portNo):
  """
  Function to create the Service files for OpenShift

  EXAMPLE:
    mkService("javaapp",8080)
  """

  inFh=open("general-templates/service.yaml","r")
  outFh=open("config/"+containerName+".service.yaml","w")

  props={}
  props["CONTAINERNAME"]=containerName
  props["PORTNO"]=portNo

  for line in inFh:
    result=__replaceLine(line)
    outFh.write(result)

  inFh.close()
  outFh.close()

def persistentVolume(containerName,size):
  """
  Function to define persistent storage for pods.

  EXAMPLE:
    persistentVolume("database","80Gi")
  """

  inFh=open("general-templates/persistentvolumeclaim.yaml","r")
  outFh=open("config/"+containerName+".persistentvolumeclaim.yaml","w")

  props={}
  props["CONTAINERNAME"]=containerName
  props["CLAIMSIZE"]=size

  for line in inFh:
    result=__replaceLine(line)
    outFh.write(result[0])

  inFh.close()
  outFh.close()

def mkImgStream(containerName,osDisplayName,imgDesc,imgStream,imgTag):
  """
  Function to create Image Stream files to locate the images in OpenShift for deployments

  EXAMPLE:
    mkImgStream("javaapp","My Java Application Image","Contains the Java Application","steve1/javaapp:latest","latest")
  """

  inFh=open("general-templates/imagestream.yaml","r")
  outFh=open("config/"+containerName+".imagestream.yaml","w")

  props={}
  props["CONTAINERNAME"]=containerName
  props["OPENSHIFTIMAGEDISPLAYNAME"]=containerName+"Image"
  props["IMAGEDESCRIPTION"]="Image for "+containerName
  props["IMAGESTREAM"]=imgStream
  props["DOCKERIMAGETAG"]=imgTag

  for line in inFh:
    result=__replaceLine(line)
    outFh.write(result[0])

  inFh.close()
  outFh.close()

def mkDeploymentConf(containerName,minPods,imgStream,portNo,containerVolume,pvClaim):
  """
  Function to create deployment configuration file for OpenShift.

  EXAMPLE:
    mkDeploymentConf("database",1,"steve1/database:latest",8080,"/var/lib/mysql","database-claim0")
  """

  inFh=open("general-templates/deploymentconfig.yaml","r")
  outFh=open("config/"+containerName+".deploymentconfig.yaml","w")

  flag=0
  props={}
  props["CONTAINERNAME"]=containerName
  props["MINIMUMPODS"]=minPods
  props["IMAGESTREAM"]=imgStream
  props["PORTNO"]=portNo
  props["CONTAINERVOLUME"]=containerVolume
  props["PVCLAIMNAME"]=pvClaim

  for line in inFh:
    props["line"]=line

    if pvClaim == "":
      if re.search("\${VOLUMESTART}",line):
        flag=1
        continue

    if re.search("\${VOLUMESTART}",line) and pvClaim != "":
      continue

    if flag==1:
      if re.search("\${VOLUMEEND}",line):
        flag=0
        continue
      else:
        continue

    if re.search("\${VOLUMEEND}",line) and pvClaim != "":
        continue

    result=__replaceLine(**props)
    outFh.write(result)

  inFh.close()
  outFh.close()

def __questions():
    # Private function to ask questions about what you need
    questions["PROJECTNAME"]={"Q":"What is the name of your project: "}
    questions["NUMDCS"]={"Q":"How many containers do you need: "}
    questions["CONTAINERNAME"]={"Q":"What is the name for this container: "}
    questions["PORTNO"]={"Q":"What is the port number that the container service listens on (default 8080): "}
    questions["DOCKERREG"]={"Q":"What is the URL of your private docker registry (dockerreg.training.local:5000): "}
    questions["DOCKERIMAGETAG"]={"Q":"What is the version number of this image (ENTER for latest): "}
    questions["MINIMUMPODS"]={"Q":"How many Pods must be initially started (default = 1): "}
    questions["PUBLICURL"]={"Q":"What is the public URL for this container (ENTER for none): "}
    questions["CONTAINERVOLUME"]={"Q":"What is the directory inside the container to share (ENTER for none): "}
    questions["CLAIMSIZE"]={"Q":"How much persistent storage does this container need (default 100Gi): "}
    questions["PVCLAIMNAME"]={"Q":"What is the name for this persistent storage: "}

def __inputChecks(fieldName,value):
    # Input checks and defaults
    result=""

    if value != "":
        return value

    if fieldName == "PORTNO" and value == "":
        result = 8080

    if fieldName == "DOCKERIMAGETAG" and value == "":
        result = "latest"

    if fieldName == "MINIMUMPODS" and value == "":
        result = 1

    try:
        if fieldName == "CLAIMSIZE" and value == "" and questions["CONTAINERVOLUME"]["A"][containerCount] != "":
            result = "100Gi"
    except:
        pass

    return result

# MAIN Code starts here
__questions()
# Set the questions to ask
qorder=["CONTAINERNAME","PORTNO","DOCKERIMAGETAG","MINIMUMPODS","PUBLICURL","CONTAINERVOLUME","CLAIMSIZE","PVCLAIMNAME"]
allKeys=["PROJECTNAME","NUMDCS","DOCKERREG","IMAGESTREAM","CONTAINERNAME","PORTNO","DOCKERIMAGETAG","MINIMUMPODS","PUBLICURL","CONTAINERVOLUME","CLAIMSIZE","PVCLAIMNAME"]
templates=["deploymentconfig.yaml","imagestream.yaml","service.yaml","route.yaml","persistenetvolumeclaim.yaml"]

# Open a file to save the questions just in case theres an error
#if os.path.exists("/tmp/ostsave.dat"):
#    qfh=open("/tmp/ostsave.dat","rb")
#    questions=pickle.load(qfh)

# Save the answers in a file
qfh=open("/tmp/ostsave.dat","wb",0)

# Ask the questions, for those items that are project wide
questions["PROJECTNAME"]["A"]=raw_input(questions["PROJECTNAME"]["Q"])
questions["NUMDCS"]["A"]=input(questions["NUMDCS"]["Q"])
questions["DOCKERREG"]["A"]=raw_input(questions["DOCKERREG"]["Q"])
# questions["IMAGESTREAM"]["A"] is missing as it will have a containerCount

containerCount=1
while containerCount <= questions["NUMDCS"]["A"]:
    for question in qorder:
        if question == "PVCLAIMNAME" and questions["CONTAINERVOLUME"]["A"][containerCount] == "":
            continue

        if question == "CLAIMSIZE" and questions["CONTAINERVOLUME"]["A"][containerCount] == "":
            continue

        if "A" not in questions[question]:
            questions[question]["A"]={}
            questions[question]["A"]={containerCount: raw_input(questions[question]["Q"]) }
        else:
            questions[question]["A"][containerCount]=raw_input(questions[question]["Q"])

        questions[question]["A"][containerCount]=__inputChecks(question,questions[question]["A"][containerCount])

        pickle.dump(questions, qfh, pickle.HIGHEST_PROTOCOL)

    if questions["DOCKERREG"]["A"] != "":
        questions["IMAGESTREAM"]={"A": {containerCount: questions["DOCKERREG"]["A"]+"/"+questions["PROJECTNAME"]["A"]+"/"+questions["CONTAINERNAME"]["A"][containerCount]+":"+questions["DOCKERIMAGETAG"]["A"][containerCount]}}
    else:
        questions["IMAGESTREAM"]={"A": {containerCount: questions["PROJECTNAME"]["A"]+"/"+questions["CONTAINERNAME"]["A"][containerCount]+":"+questions["DOCKERIMAGETAG"]["A"][containerCount]}}
    containerCount+=1

# DEBUG MESSAGES
print(str(questions))
print "Number of deployment configs: "+str(questions["NUMDCS"]["A"])
qfh.close()

# Create the files in the config directory
if not os.path.exists("config/"+questions["PROJECTNAME"]["A"]):
    os.mkdir("config/"+questions["PROJECTNAME"]["A"])

for filename in templates:
    tcount=1
    while tcount <= questions["NUMDCS"]["A"]:
        ifh=open("general-templates/"+filename,"r")
        ofh=open("config/"+questions["PROJECTNAME"]["A"]+"/"+questions["CONTAINERNAME"]["A"][tcount]+"-"+filename,"w")
        for line in ifh:
            for key in allKeys:
                try:
                    x=re.search(key,line)
                    if x:
                        if tcount in questions[key]["A"]:
                            line=re.sub(key,str(questions[key]["A"][tcount]),line)
                        else:
                            line=re.sub(key,str(questions[key]["A"]),line)
                except:
                    pass
            ofh.write(line)
        ifh.close()
        ofh.close()
        tcount+=1
